#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π WiFi –∏ IP –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
"""

import subprocess
import socket
import re
import time

def get_wifi_ssid():
    """Get the current WiFi SSID."""
    try:
        # Try iwgetid first (most common on Linux)
        result = subprocess.run(['iwgetid', '-r'], capture_output=True, text=True, timeout=5)
        if result.returncode == 0 and result.stdout.strip():
            return result.stdout.strip()
    except:
        pass
    
    try:
        # Try nmcli (NetworkManager)
        result = subprocess.run(['nmcli', '-t', '-f', 'active,ssid', 'dev', 'wifi'], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            for line in result.stdout.split('\n'):
                if line.startswith('yes:'):
                    ssid = line.split(':', 1)[1]
                    if ssid:
                        return ssid
    except:
        pass
    
    try:
        # Try iw dev (alternative method)
        result = subprocess.run(['iw', 'dev'], capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            ssid_match = re.search(r'ssid (.+)', result.stdout)
            if ssid_match:
                return ssid_match.group(1)
    except:
        pass
    
    return "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"

def get_ip_address():
    """Get the current IP address."""
    try:
        # Try ip route get (most reliable)
        result = subprocess.run(['ip', 'route', 'get', '1'], capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            ip_match = re.search(r'src (\d+\.\d+\.\d+\.\d+)', result.stdout)
            if ip_match:
                return ip_match.group(1)
    except:
        pass
    
    try:
        # Try ip addr show for wlan0
        result = subprocess.run(['ip', 'addr', 'show', 'wlan0'], capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            ip_match = re.search(r'inet (\d+\.\d+\.\d+\.\d+)', result.stdout)
            if ip_match:
                return ip_match.group(1)
    except:
        pass
    
    try:
        # Try ifconfig wlan0
        result = subprocess.run(['ifconfig', 'wlan0'], capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            ip_match = re.search(r'inet (\d+\.\d+\.\d+\.\d+)', result.stdout)
            if ip_match:
                return ip_match.group(1)
    except:
        pass
    
    try:
        # Fallback: socket connection
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except:
        pass
    
    return "–ù–µ –Ω–∞–π–¥–µ–Ω"

def test_functions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–∏—è WiFi –∏ IP...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç WiFi SSID
    wifi_ssid = get_wifi_ssid()
    print(f"üì∂ WiFi SSID: {wifi_ssid}")
    
    # –¢–µ—Å—Ç IP –∞–¥—Ä–µ—Å–∞
    ip_address = get_ip_address()
    print(f"üåê IP –∞–¥—Ä–µ—Å: {ip_address}")
    
    print("=" * 50)
    return wifi_ssid, ip_address

def test_header_simulation(wifi_ssid, ip_address):
    """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ."""
    print("\nüñ•Ô∏è  –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (–≤–º–µ—Å—Ç–æ BJORN)...")
    print("=" * 60)
    
    show_wifi_info = True
    
    for i in range(4):  # 4 –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if show_wifi_info:
            header_text = f"WiFi: {wifi_ssid}"
            icon = "üì∂"
        else:
            header_text = f"IP: {ip_address}"
            icon = "üåê"
        
        print(f"{icon} –ó–ê–ì–û–õ–û–í–û–ö: {header_text}")
        show_wifi_info = not show_wifi_info
        time.sleep(1)
    
    print("=" * 60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞."""
    print("üöÄ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò WiFi –ò IP –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø")
    print("=" * 70)
    
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π
    wifi_ssid, ip_address = test_functions()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    test_header_simulation(wifi_ssid, ip_address)
    
    print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
    print(f"   ‚Ä¢ WiFi —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ' if wifi_ssid not in ['–û—à–∏–±–∫–∞', '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'] else '‚ùå'}")
    print(f"   ‚Ä¢ IP —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ' if ip_address != '–ù–µ –Ω–∞–π–¥–µ–Ω' else '‚ùå'}")
    print(f"   ‚Ä¢ –õ–æ–≥–∏–∫–∞ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è: ‚úÖ")
    print(f"   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫: ‚úÖ")
    
    print("\nüéØ –ò–¢–û–ì:")
    print("   –í–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ 'BJORN' –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç")
    print("   –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è WiFi –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ IP –∞–¥—Ä–µ—Å —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º")
    print("   –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥!")
    
    print("\nüìã –í–ù–ï–°–ï–ù–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
    print("   ‚Ä¢ –ó–∞–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç 'BJORN' –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –Ω–∞ WiFi/IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ get_wifi_ssid() –∏ get_ip_address()")
    print("   ‚Ä¢ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç font_viking –¥–ª—è —Å—Ç–∏–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞")

if __name__ == "__main__":
    main()