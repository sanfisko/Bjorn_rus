#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã WiFi –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
"""

import sys
import os
import time
import json
import subprocess
from PIL import Image, ImageDraw, ImageFont
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def create_visual_indicator(status, position=(110, 65)):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞"""
    width, height = 122, 250
    image = Image.new('1', (width, height), 255)
    draw = ImageDraw.Draw(image)
    
    # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
    draw.rectangle((0, 0, width-1, height-1), outline=0)
    
    # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç IDLE
    try:
        font = ImageFont.load_default()
        draw.text((8, 65), "IDLE", font=font, fill=0)
    except:
        draw.text((8, 65), "IDLE", fill=0)
    
    # –†–∏—Å—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    x, y = position
    if status == "running":
        draw.ellipse((x, y, x+10, y+10), fill=0)  # –ß–µ—Ä–Ω—ã–π –∫—Ä—É–≥
        draw.text((x+2, y+2), "R", fill=255)
    elif status == "connected":
        draw.rectangle((x, y, x+10, y+10), fill=0)  # –ß–µ—Ä–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
        draw.text((x+2, y+2), "C", fill=255)
    elif status == "stopped":
        draw.rectangle((x, y, x+10, y+10), outline=0, fill=255)  # –ü—É—Å—Ç–æ–π –∫–≤–∞–¥—Ä–∞—Ç
        draw.text((x+2, y+2), "S", fill=0)
    else:
        draw.polygon([(x, y+10), (x+5, y), (x+10, y+10)], fill=0)  # –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
        draw.text((x+2, y+6), "?", fill=255)
    
    return image

def test_complete_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    
    print("=== –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã WiFi –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===")
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    subprocess.run("sudo pkill -KILL -f wifi_auto_connect.sh", shell=True, check=False)
    time.sleep(1)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞
    if os.path.exists('/tmp/wifi_auto_connect_status'):
        os.remove('/tmp/wifi_auto_connect_status')
    
    print("\n1. –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞...")
    script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'wifi_auto_connect.sh')
    process = subprocess.Popen(['sudo', script_path], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
    # –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞
    for i in range(10):
        if os.path.exists('/tmp/wifi_auto_connect_status'):
            break
        time.sleep(0.5)
    
    time.sleep(2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    result = subprocess.run("pgrep -f 'wifi_auto_connect.sh' | grep -v grep", shell=True, capture_output=True, text=True)
    process_running = result.returncode == 0 and result.stdout.strip() != ""
    
    status_file_exists = os.path.exists('/tmp/wifi_auto_connect_status')
    file_status = "unknown"
    if status_file_exists:
        try:
            with open('/tmp/wifi_auto_connect_status', 'r') as f:
                status_data = json.loads(f.read())
                file_status = status_data.get('status', 'stopped')
        except:
            pass
    
    # –õ–æ–≥–∏–∫–∞ –∏–∑ utils.py
    actual_status = process_running
    if status_file_exists and file_status != 'stopped':
        actual_status = True
    
    print(f"   –ü—Ä–æ—Ü–µ—Å—Å: {process_running}, –§–∞–π–ª: {status_file_exists}, –°—Ç–∞—Ç—É—Å: {file_status}")
    print(f"   –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {actual_status}")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if actual_status:
        image = create_visual_indicator("running")
        image.save('indicator_running.png')
        print("   ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä '–∑–∞–ø—É—â–µ–Ω' —Å–æ–∑–¥–∞–Ω")
    
    print("\n2. –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    subprocess.run("sudo pkill -TERM -f wifi_auto_connect.sh", shell=True, check=False)
    time.sleep(1)
    subprocess.run("sudo pkill -KILL -f wifi_auto_connect.sh", shell=True, check=False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ –≤—Ä—É—á–Ω—É—é
    try:
        status_file = '/tmp/wifi_auto_connect_status'
        timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
        status_data = {"status": "stopped", "message": "–°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "timestamp": timestamp}
        with open(status_file, 'w') as f:
            json.dump(status_data, f)
        os.chmod(status_file, 0o666)
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    time.sleep(2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    result = subprocess.run("pgrep -f 'wifi_auto_connect.sh' | grep -v grep", shell=True, capture_output=True, text=True)
    process_running = result.returncode == 0 and result.stdout.strip() != ""
    
    status_file_exists = os.path.exists('/tmp/wifi_auto_connect_status')
    file_status = "unknown"
    if status_file_exists:
        try:
            with open('/tmp/wifi_auto_connect_status', 'r') as f:
                status_data = json.loads(f.read())
                file_status = status_data.get('status', 'stopped')
        except:
            pass
    
    # –õ–æ–≥–∏–∫–∞ –∏–∑ utils.py
    actual_status = process_running
    if status_file_exists and file_status != 'stopped':
        actual_status = True
    
    print(f"   –ü—Ä–æ—Ü–µ—Å—Å: {process_running}, –§–∞–π–ª: {status_file_exists}, –°—Ç–∞—Ç—É—Å: {file_status}")
    print(f"   –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {actual_status}")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not actual_status:
        image = create_visual_indicator("stopped")
        image.save('indicator_stopped.png')
        print("   ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' —Å–æ–∑–¥–∞–Ω")
    
    print("\n3. –¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    statuses = ["running", "connected", "stopped", "waiting"]
    for status in statuses:
        image = create_visual_indicator(status)
        image.save(f'indicator_{status}_position.png')
    
    print("   ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã")
    print("   üìç –ü–æ–∑–∏—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: (110, 65) - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∞")
    print("   üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è: 2 –ø–∏–∫—Å–µ–ª—è")
    
    print("\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    if not actual_status:
        print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º")
    
    print("\n=== –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã ===")
    for f in ['indicator_running.png', 'indicator_stopped.png'] + [f'indicator_{s}_position.png' for s in statuses]:
        if os.path.exists(f):
            print(f"   üìÑ {f}")

if __name__ == "__main__":
    test_complete_system()