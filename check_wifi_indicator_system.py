#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ WiFi –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""

import os
import json
import sys

def check_files():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ WiFi:")
    print("=" * 45)
    
    files_to_check = [
        ("wifi_auto_connect.sh", "–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"),
        ("shared.py", "–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ"),
        ("display.py", "–ú–æ–¥—É–ª—å –¥–∏—Å–ø–ª–µ—è"),
        ("resources/images/static/wifi_auto_running.png", "–ò–∫–æ–Ω–∫–∞ '—Ä–∞–±–æ—Ç–∞–µ—Ç'"),
        ("resources/images/static/wifi_auto_scanning.png", "–ò–∫–æ–Ω–∫–∞ '—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'"),
        ("resources/images/static/wifi_auto_connecting.png", "–ò–∫–æ–Ω–∫–∞ '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'"),
        ("resources/images/static/wifi_auto_connected.png", "–ò–∫–æ–Ω–∫–∞ '–ø–æ–¥–∫–ª—é—á–µ–Ω–æ'"),
        ("resources/images/static/wifi_auto_failed.png", "–ò–∫–æ–Ω–∫–∞ '–æ—à–∏–±–∫–∞'"),
        ("resources/images/static/wifi_auto_waiting.png", "–ò–∫–æ–Ω–∫–∞ '–æ–∂–∏–¥–∞–Ω–∏–µ'"),
        ("resources/images/static/wifi_auto_stopped.png", "–ò–∫–æ–Ω–∫–∞ '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'"),
    ]
    
    all_ok = True
    for file_path, description in files_to_check:
        if os.path.exists(file_path):
            print(f"‚úì {description}: {file_path}")
        else:
            print(f"‚úó {description}: {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
            all_ok = False
    
    return all_ok

def check_shared_py():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ shared.py"""
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ shared.py:")
    print("=" * 35)
    
    try:
        with open("shared.py", 'r') as f:
            content = f.read()
        
        checks = [
            ("wifi_auto_status", "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç—É—Å–∞"),
            ("wifi_auto_message", "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è"),
            ("wifi_auto_timestamp", "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–∏"),
            ("wifi_auto_running", "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏ '—Ä–∞–±–æ—Ç–∞–µ—Ç'"),
            ("wifi_auto_scanning", "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏ '—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'"),
            ("wifi_auto_connecting", "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏ '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'"),
            ("wifi_auto_connected", "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏ '–ø–æ–¥–∫–ª—é—á–µ–Ω–æ'"),
            ("wifi_auto_failed", "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏ '–æ—à–∏–±–∫–∞'"),
            ("wifi_auto_waiting", "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏ '–æ–∂–∏–¥–∞–Ω–∏–µ'"),
            ("wifi_auto_stopped", "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏ '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'"),
            ("get_wifi_auto_icon", "–ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏"),
        ]
        
        all_ok = True
        for check, description in checks:
            if check in content:
                print(f"‚úì {description}")
            else:
                print(f"‚úó {description} - –ù–ï –ù–ê–ô–î–ï–ù–û")
                all_ok = False
        
        return all_ok
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è shared.py: {e}")
        return False

def check_display_py():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ display.py"""
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ display.py:")
    print("=" * 35)
    
    try:
        with open("display.py", 'r') as f:
            content = f.read()
        
        checks = [
            ("update_wifi_auto_status", "–ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"),
            ("get_wifi_auto_icon", "–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏"),
            ("wifi_auto_icon", "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∏"),
        ]
        
        all_ok = True
        for check, description in checks:
            if check in content:
                print(f"‚úì {description}")
            else:
                print(f"‚úó {description} - –ù–ï –ù–ê–ô–î–ï–ù–û")
                all_ok = False
        
        return all_ok
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è display.py: {e}")
        return False

def check_wifi_script():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ wifi_auto_connect.sh"""
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ wifi_auto_connect.sh:")
    print("=" * 42)
    
    try:
        with open("wifi_auto_connect.sh", 'r') as f:
            content = f.read()
        
        checks = [
            ("STATUS_FILE", "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞"),
            ("update_status", "–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"),
            ("init_status", "–§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"),
            ("/tmp/wifi_auto_connect_status", "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—Ç–∞—Ç—É—Å–∞"),
        ]
        
        all_ok = True
        for check, description in checks:
            if check in content:
                print(f"‚úì {description}")
            else:
                print(f"‚úó {description} - –ù–ï –ù–ê–ô–î–ï–ù–û")
                all_ok = False
        
        return all_ok
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è wifi_auto_connect.sh: {e}")
        return False

def test_status_file():
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞:")
    print("=" * 30)
    
    status_file = "/tmp/wifi_auto_connect_status"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞
    test_data = {
        "status": "testing",
        "message": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
        "timestamp": "2025-06-02 16:51:00"
    }
    
    try:
        with open(status_file, 'w') as f:
            json.dump(test_data, f)
        print(f"‚úì –§–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–∑–¥–∞–Ω: {status_file}")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ
        with open(status_file, 'r') as f:
            read_data = json.load(f)
        
        if read_data == test_data:
            print("‚úì –§–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ —á–∏—Ç–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞")
            return False
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        os.remove(status_file)
        print("‚úì –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ —É–¥–∞–ª–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("–ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –ò–ù–î–ò–ö–ê–¢–û–†–ê –°–¢–ê–¢–£–°–ê WiFi –ê–í–¢–û–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
    print("=" * 60)
    
    checks = [
        ("–§–∞–π–ª—ã", check_files),
        ("shared.py", check_shared_py),
        ("display.py", check_display_py),
        ("wifi_auto_connect.sh", check_wifi_script),
        ("–§–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞", test_status_file),
    ]
    
    all_passed = True
    results = []
    
    for name, check_func in checks:
        result = check_func()
        results.append((name, result))
        if not result:
            all_passed = False
    
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 60)
    
    for name, result in results:
        status = "‚úì –ü–†–û–ô–î–ï–ù–û" if result else "‚úó –û–®–ò–ë–ö–ê"
        print(f"{name:20} {status}")
    
    print("=" * 60)
    if all_passed:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n–°–∏—Å—Ç–µ–º–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ WiFi –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\n–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("  python3 run_wifi_simulation.py")
        return 0
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò!")
        print("\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.")
        return 1

if __name__ == "__main__":
    sys.exit(main())